var documenterSearchIndex = {"docs":
[{"location":"api/#","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"Modules = [Caching]","category":"page"},{"location":"examples/#Usage-examples-1","page":"Usage examples","title":"Usage examples","text":"","category":"section"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"The following examples show how Caching can be employed to cache function outputs. Most examples employ the macros as this is the most straightforward usage pattern.","category":"page"},{"location":"examples/#The-Cache-object-1","page":"Usage examples","title":"The Cache object","text":"","category":"section"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"The caching object is named Cache and it can be easily constructed using the @cache macro. There are several supported expressions that can be used to construct Caches:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"using Caching, InteractiveUtils, Serialization","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"@cache function foo(x)\n    x+1\nend\ntypeof(foo)\n@code_warntype foo(1)","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"or, for type stability,","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"@cache function foo2(x)::Int\n    x+1\nend\n@code_warntype foo2(1)","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"The approach works for anonymous functions as well:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"@cache foo3 = x->x-1","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"or, for type stability,","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"@cache foo4 = x::Int->x-1\n@code_warntype foo3(1)\n@code_warntype foo4(1)","category":"page"},{"location":"examples/#Memory-and-disk-memoization-1","page":"Usage examples","title":"Memory and disk memoization","text":"","category":"section"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"The Cache object itself supports reading/writing cached entries from/to memory and to disk.","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"note: Note\nRe-using the cached function outputs from a file is not possible once the in-memory Cache object goes out of scope.","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"foo5(x) = x+1\ndc = @cache foo5 \"somefile.bin\"\ndc(1);  # add one entry to cache\ndc.cache\ndc.offsets  # disk cache information (hash=>(start byte, end byte))\ndc.filename  # file information\nisfile(dc.filename)  # file does not exist","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"The cache can be written to disk using the persist! function or the @persist! macro:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"@persist! dc  # writes cache to disk and updates offsets \nisfile(dc.filename)\ndc.offsets","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"The cache can be deleted using the empty! function or the @empty! macro:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"@empty! dc  # delete memory cache\n@empty! dc true  # delete also the disk cache\nisfile(\"somefile.bin\")","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"If no file name is provided when creating a Cache object, a file name will be automatically generated:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"dc = @cache foo5\ndc.filename","category":"page"},{"location":"examples/#Cache-misses-1","page":"Usage examples","title":"Cache misses","text":"","category":"section"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"In case of a cache memory miss, the cached data is retrieved from disk if available:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"dc = @cache foo5::Int \"somefile.bin\"\nfor i in 1:3 dc(i); end              # add 3 entries\n@persist! dc\n@assert isfile(\"somefile.bin\")\n@empty! dc                           # empty memory cache\n@assert isempty(dc.cache)\nfor i in 4:6 dc(i); end              # add 3 new entries\ndc\ndc(1)  # only on disk\ndc(4)  # in memory","category":"page"},{"location":"examples/#Memory-disk-synchronization-1","page":"Usage examples","title":"Memory-disk synchronization","text":"","category":"section"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"Synchronization between the memory and disk cache contents is done with the help of the syncache! function and @syncache! macro:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"dc = @cache foo5 \"somefile.bin\"       # make a Cache object\nfor i in 1:5 dc(i); end              # populate the memory cache with 5 entries\n@persist! dc                         # write to disk the cache the 5 entries\n@empty! dc                           # delete the memory cache\n\n@syncache! dc \"disk\"                 # load cache from disk\n@empty! dc  # empty memory cache \nfor i in 1:3  dc(-i); end            # populate the memory cache with 3 new entries\n@syncache! dc \"memory\"               # write memory cache to disk\n@empty! dc\n@syncache! dc \"disk\"                 # load cache from disk\n\ndc.cache  # view the cache\ndc.offsets  # view the file offsets","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"Synchronization of disk and memory cache contents can also be performed in one go by passing \"both\" in the @syncache! macro call:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"dc = @cache foo5;\nfor i in 1:3 dc(i); end              # populate the memory cache with 3 entries\n@syncache! dc \"memory\"               # write to disk the 3 entries\n@empty! dc                           # delete the in-memory cache\nfor i in 1:5 dc(-i); end             # populate the in-memory cache with 5 new entries\n@syncache! dc \"both\"                 # sync both memory and disk\n\ndc.cache","category":"page"},{"location":"examples/#Maximum-sizes-1","page":"Usage examples","title":"Maximum sizes","text":"","category":"section"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"Cache objects support maximum sizes in terms of either number of entries (i.e. function outputs) or the maximum memory size allowed:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"foo6(x) = x\ndc = @cache foo6 \"somefile.bin\" 3     # 3 objects max; use Int for objects\nfor i in 1:3 dc(i) end               # cache is full\ndc(4)                                # 1 is removed (FIFO rule)\n@assert !(1 in values(dc.cache)) &&\n    all(i in values(dc.cache) for i in 2:4)\n@persist! dc\n@empty! dc                           # 2,3,4 on disk\nfor i in 5:6 dc(i) end               # 5 and 6 in memory\n@syncache! dc                        # brings 4 (most recent on disk) in memory and writes 5,6 on disk","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"dc = @cache foo6 \"somefile.bin\" 1.0   # 1.0 --> 1 KiB = 1024 bytes max; use Float64 for KiB\nfor i in 1:128 dc(i) end             # cache is full (128 x 8bytes/Int = 1024 bytes)\ndc(129)                              # 1 is removed\n@assert !(1 in values(dc.cache)) &&\n    all(i in values(dc.cache) for i in 2:129)\n@persist! dc\n@empty! dc                           # 2,...,129 on disk, nothing in memory\nfor i in 130:130+126 dc(i) end       # write 127 entries\n#--> 130,..,256 in memory, 2,...,129 on disk\n@syncache! dc                        # brings 129 in memory and 130,...,256 on disk","category":"page"},{"location":"examples/#Serialization-1","page":"Usage examples","title":"Serialization","text":"","category":"section"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"compat: Caching 0.2.0\nThis feature requires version 0.2.0","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"It is possible to save and load Cache objects to and from disk. This does not refer to the disk cache associated with an object but rather the object itself. The straightforward approach is to generate a cache object through the @cache macro and define the function withing the scope of the call:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"@cache foo = x->begin println(\"this is foo.\"); true; end\nserialize(\"foo.serialized.bin\", foo)\nfoo_d = deserialize(\"foo.serialized.bin\", Cache)\n@assert foo_d(1)  # result not cached\nfoo_d(1)  # result cached","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"One can check the that the code of the function is captured:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"println(foo_d.func_def)","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"The approach works in a similar way for definitions of the form @cache function bar(x) end","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"If the Cache object is created by directly specifying an existing function, the only way to recover full functionality is to manually specify the same function when deserializing:","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"bar(x) = x\nbarc = @cache bar  # `bar` code is unknwon\nserialize(\"bar.serialized.bin\", barc)\nbar_d = deserialize(\"bar.serialized.bin\", Cache)  # fails, cannot recreate function `bar`\nbar_d = deserialize(\"bar.serialized.bin\", Cache; func=bar)  # works, bar is known\nbar_d(1)","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"warning: Warning\nAny function can be provided through the func keyword argument and this may result in undefined behavior; it is up to the user to provide the original cached function.\nThis approach is independent of the disk cache associated with the Cache object and portability has again to be explicitly ensured i.e. if moving the serialized objects and disk caches across machines the path of the disk cache (filename property) may have to be manually changed.","category":"page"},{"location":"examples/#","page":"Usage examples","title":"Usage examples","text":"More usage examples can be found in the test/runtests.jl file.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"CurrentModule=Caching","category":"page"},{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"This package provides a simple programming interface for caching function outputs (i.e. memoization) to memory, disk or both. The API that exposes functionality for creating in-memory cache structures and accessing, writing and synchronizing these to disk. It supports maximum sizes (in number of objects or KiB of memory) and compression (through TranscodingStreams.jl codecs). Since this a work-in-progress, there are bound to be rough edges and little to no documentation. However, the interface is accessible enough to be productively employed at this stage.","category":"page"},{"location":"#Main-features-1","page":"Introduction","title":"Main features","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Non intrusive, easy to use @cache macro\nFast and type stable if type annotations are used in the function definitions\nLoading/saving from/to disk with compression (.bzip2 and .gzip)\nMaximum in-memory cache size (either number of objects or bytes)\nCan save almost anything to disk (uses Serialization so it is slow)","category":"page"},{"location":"#Installation-1","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"In the shell of choice, using","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"$ git clone https://github.com/zgornel/Caching.jl","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"or, inside Julia","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"] add Caching","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"and for the latest master branch,","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"] add https://github.com/zgornel/Caching.jl#master","category":"page"}]
}
